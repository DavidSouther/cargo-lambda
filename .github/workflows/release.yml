name: Release

on:
  push:
    tags: [ 'v*' ]

jobs:
  release-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - name: Build
        uses: messense/maturin-action@v1
        with:
          maturin-version: 0.13.0
          args: --release --out dist --strip --universal2 -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: apple-darwin-bin
          path: target/release/cargo-lambda
          if-no-files-found: error

  release-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - arch: x64
            target: x86_64-pc-windows-msvc
          - arch: x86
            target: i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - name: Build
        uses: messense/maturin-action@v1
        with:
          maturin-version: 0.13.0
          target: ${{ matrix.platform.target }}
          args: --release --out dist --strip -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.platform.arch }}-bin
          path: target/${{ matrix.platform.target }}/release/cargo-lambda.exe
          if-no-files-found: error

  release-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl" },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl" },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf" },
          { target: "armv7-unknown-linux-musleabi", image_tag: "armv7-musleabi" },
        ]
    container:
      image: messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.target }}
      - name: Build
        uses: messense/maturin-action@main
        with:
          maturin-version: 0.13.0
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --release -o dist --strip -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/cargo-lambda
          if-no-files-found: error

  release-all:
    name: Release all artifacts
    runs-on: ubuntu-latest
    needs: [ release-macos, release-windows, release-linux ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: target/github-release
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Create upload directory
        run: |
          mkdir -p target/github-release
          mkdir -p target/upload

      - name: Package Windows files
        working-directory: target/github-release
        run: |
          make -f ../../Makefile build-release-zip tag=${{ steps.tag.outputs.tag }} target=windows-x64
          make -f ../../Makefile build-release-zip tag=${{ steps.tag.outputs.tag }} target=windows-x86

      - name: Package MacOS files
        working-directory: target/github-release
        run: |
          make -f ../../Makefile build-release-tar tag=${{ steps.tag.outputs.tag }} target=apple-darwin

      - name: Package Linux files
        working-directory: target/github-release
        run: |
          make -f ../../Makefile build-release-tar tag=${{ steps.tag.outputs.tag }} target=x86_64-unknown-linux-musl
          make -f ../../Makefile build-release-tar tag=${{ steps.tag.outputs.tag }} target=i686-unknown-linux-musl
          make -f ../../Makefile build-release-tar tag=${{ steps.tag.outputs.tag }} target=aarch64-unknown-linux-musl
          make -f ../../Makefile build-release-tar tag=${{ steps.tag.outputs.tag }} target=armv7-unknown-linux-musleabihf
          make -f ../../Makefile build-release-tar tag=${{ steps.tag.outputs.tag }} target=armv7-unknown-linux-musleabi

      - name: Move release files to upload
        run: |
          mkdir -p target/upload
          mv target/github-release/*.tar.gz* target/upload
          mv target/github-release/*.zip* target/upload
          mv target/github-release/**/*.whl target/upload

      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/upload/*
          prerelease: ${{ contains(github.ref, '-pre') }}
          generate_release_notes: true
